// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Rentless.Models;

namespace Rentless.Migrations
{
    [DbContext(typeof(RentlessDBContext))]
    [Migration("20200108055708_defaultBlank2")]
    partial class defaultBlank2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Rentless.Models.City", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10).HasDefaultValue("");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50).HasDefaultValue("");

                    b.Property<string>("StateCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10).HasDefaultValue("");

                    b.HasKey("Code");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateCode");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Rentless.Models.Country", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10).HasDefaultValue("");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50).HasDefaultValue("");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyCode");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Rentless.Models.Currency", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50).HasDefaultValue("");

                    b.HasKey("Code");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("Rentless.Models.State", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10).HasDefaultValue("");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50).HasDefaultValue("");

                    b.HasKey("Code");

                    b.HasIndex("CountryId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("Rentless.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50).HasDefaultValue("");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Rentless.Models.City", b =>
                {
                    b.HasOne("Rentless.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Rentless.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateCode");
                });

            modelBuilder.Entity("Rentless.Models.Country", b =>
                {
                    b.HasOne("Rentless.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyCode");
                });

            modelBuilder.Entity("Rentless.Models.State", b =>
                {
                    b.HasOne("Rentless.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");
                });
#pragma warning restore 612, 618
        }
    }
}
